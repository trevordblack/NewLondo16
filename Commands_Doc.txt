For all command syntax:
  uppercase and lowercase are accepted everywhere, consistency in command
    LOAD R01 0xFF
    load r01 0xff
  underscores are neglected

NATIVE COMMANDS: ---------------------------------------------------------------------------------------

load 8 bit
  Descriptor:
    Load an 8 bit value into a Register. Sets smallest byte (b7:b0) to hex, zeros all other bits (b31:b8)
  Math Formula:
    C = h 
  Syntax:
    load c 0xFF
  Syntaxes Supported:
    load c 0xFF
    load c 255
    load c 11111111b
  Binary:
    m-001-cccc-hhhh-hhhh
    
Signed Addition with 3 operators
  Descriptor:
    Set a third register to the signed sum of two other registers
  Math Formula:
    C = A + B
  Syntax:
    add c a b
  Binary:
    m-010-cccc-aaaa-bbbb

Signed Subtraction with 3 operators
  Descriptor:
    Set a third register to the signed difference of two other registers
  Math Formula:
    C = A - B
  Syntax:
    sub c a b
  Binary:
    m-011-cccc-aaaa-bbbb
    
Arithmetic Shift Left
  Descriptor:
    Arithmetically shift a register value to the left. 
    Amount to shift is determined by a hex value and a second register value.
    When second register value is 0, shift the amount of hex value + 1, this enables 16 bit shift in a single command.
    when register value is not 0, shift the sum of register value and hex value 
  Math Formula:
    AMT = (A==0) ? (h+1) : (h+A)
    C = C << AMT
  Syntax:
    asl c a 0xF
  Binary:
    m-100-cccc-aaaa-hhhh

Arithmetic Shift Right
  Descriptor:
    Arithmetically shift a register value to the right. 
    Amount to shift is determined by a hex value and a second register value.
    When second register value is 0, shift the amount of hex value + 1, this enables 16 bit shift in a single command.
    when register value is not 0, shift the sum of register value and hex value   
  Math Formula:
    AMT = (A==0) ? (h+1) : (h+A)
    C = ( C[31:AMT] ) | ( C >> AMT )
  Syntax:
    asr c a 0xF  
  Binary:
    m-101-cccc-aaaa-hhhh

Read from Memory
  Descriptor:
    Read value from memory address to register with the passed hex offset. By convention, A is the sp
  Math Formula:
    C = M[A + h]
  Syntax:
    read C M[A] h
  Binary:
    m-110-cccc-aaaa-hhhh  

Write to Memory
  Descriptor:
    Write a register value to a memory address with the passed hex offset. By convention, A is the sp
  Math Formula:
    M[A + h] = C
  Syntax:
    write C M[A] h
  Binary:
    m-111-cccc-aaaa-hhhh

Unsigned Addition with 2 operators
  Descriptor:
    Set a register to the unsigned sum of that register and another register
  Math Formula:
    C = C + A
  Syntax:
    uadd c a
  Binary:
    m-000-cccc-aaaa-0010

Unsigned Subtraction with 2 operators
  Descriptor:
    Set a register to the unsigned difference of that register and another register
  Math Formula:
    C = C - A
  Syntax:
    usub c a
  Binary:
    m-000-cccc-aaaa-0011

Signed Multiplication with 2 operators
  Descriptor:
    Set a register to the signed multiplication of that register and another register
  Math Formula:
    C = C * A
  Syntax:
    mult c a
  Binary:
    m-000-cccc-aaaa-0100    

Unsigned Multiplication with 2 operators
  Descriptor:
    Set a register to the unsigned multiplication of that register and another register
  Math Formula:
    C = C * A
  Syntax:
    umult c a
  Binary:
    m-000-cccc-aaaa-0101

Signed Division with 2 operators
  Descriptor:
    Set a register to the signed division of that register and another register
  Math Formula:
    C = C / A
  Syntax:
    div c a
  Binary:
    m-000-cccc-aaaa-0110    

Unsigned Division with 2 operators
  Descriptor:
    Set a register to the unsigned division of that register and another register
  Math Formula:
    C = C / A
  Syntax:
    udiv c a
  Binary:
    m-000-cccc-aaaa-0111

Move
  Descriptor:
    Sets all 32 bits of a register to the 32 bit value of another register
  Math Formula:
    C = A
  Syntax
    move C A
  Binary:
    m-000-cccc-aaaa-1000
    
Upper Move
  Descriptor:
    Zeros out bottom 16 bits and sets the top 16 bits of one register to the bottom 16 bit value of another register.
    Functions as a very fast shift to the left 16. Should always be chosen over asl 16
  Math Formula:
    C = A << 16
  Syntax
    uppermove C A
  Binary:
    m-000-cccc-aaaa-1001

OR
  Descriptor:
    ORs two operands
  Math Formula:
    C = C | A
  Syntax
    or C A
  Binary:
    m-000-cccc-aaaa-1010

OR with 1 NOT
  Descriptor:
    ORs the value stored at one register and the bitwise NOT of a second register value
  MAth Formula:
    C = C | (~A)
  Syntax
    ornot C A
  Binary:
    m-000-cccc-aaaa-1011

AND
  Descriptor:
    ANDs two operands
  Math Formula:
    C = C & A
  Syntax
    and C A
  Binary:
    m-000-cccc-aaaa-1100

AND with 1 NOT
  Descriptor:
    ANDs the value stored at one register and the bitwase NOT of a second register value
  Math Formula:
    C = C & (~A)
  Syntax
    andnot C A
  Binary:
    m-000-cccc-aaaa-1101

NOT
  Descriptor: 
    Returns the bitwise NOT a register value
  Math Formula:
    C = ~A
  Syntax
    not C A
  Binary:
    m-000-cccc-aaaa-1110
  
XNOR
  Descriptor:
    Returns the XNOR of two register value
  Math Formula
    C = ~(C^A)
  Syntax
    xnor C A
  Binary:
    m-000-cccc-aaaa-1111
    
RSVD
  Descriptor:
    These binaries are reserved
  Binary:
    m-000-XXXX-XXXX-000X

SYNTHESIZED COMMANDS: ----------------------------------------------------------------------------

load 16 bit:
  Descriptor:
    Loads a 16 bit value into a Register. Zeros top two bytes. Sets bytes to hex in big-endian fashion
  Real Math Formula:
    C = 0x0000_1234
  Synthesized Math Formula:
    C = 0x12
    C = C << 8
    A = 0x34
    C = C|A
  Synthesis:
    load C 0x12
    load A 0x34
    asl C B 0x7 #Where B equals 0, asl C B 8
    or C A

load 32 bit
  Descriptor:
    Loads a 32 bit value into a Register. Sets bytes to hex in big-endian fashion
  Real Math Formula:
    C = 0x1234_CDEF
  Synthesized Math Formula (0):
    C = 0x12
    A = 0x34
    C = C << 8
    C = C|A
    C = C << 16
    A = 0xCD
    A = A << 8
    B = 0xEF
    B = B|A
    C = C|B
  Synthesis (0):
    load C 0x12
    load A 0x34
    asl C D 0x7 #Where D equals 0, asl C B 8
    or C A
    uppermove C C
    load A 0xCD
    asl A D 0x7
    load B 0xEF
    or B A
    or C B
  Synthesized Math Formula (1):    
    C = 0x12
    C = C << 8
    A = 0x34
    C = C|A
    C = C << 8
    A = 0xCD
    C = C|A
    C = C << 8
    A = 0xEF
    C = C|A    
    
Logical Shift Left
  Descriptor:
    Logically shift a register to the left, functionally identical to arithmetic shift left
  Real Math Formula:
    C = C[30:0], 0
  Synthesized Math Formula:
    C = C[30:0], 0
  Synthesis:
    asl c a 0xF
    
Logical Shift Right
 Descriptor:
    Logically shift a register to the right, placing zeros into the left-most bits
  Real Math Formula:
    C = C[31-AMT:AMT]
  Synthesized Math Formula:
    
  Synthesis:  

XOR
  Descriptor:
    XORs two register values
  Real Math Formula:
    C = C^A
  Synthesized Math Formula:
    C = ~(C^A)
    C = ~C
  Synthesis:
    xnor C A
    not C C

Jump Forward
  Descriptor:
    unconditional jump forward
    Set hex to jump amount from uadd with offset of -1
    the PC will push forward by two bytes at the end of the op. Offset hex by -1
    
  Synthesis:
    load32 A 0x1234_CDEF
    uadd r15 A

Jump Backward
  Descriptor:
    unconditional jump backward
    Set hex to jump amount from uadd with offset of -1
    the PC will push forward by two bytes at the end of the op. Offset hex by -1
  Synthesis:
    load32 A 0x1234_CDEF
    usub r15 A
  
Conditional Less than or Equal to Zero Branch
  Descriptor:
    Conditional Branch Forward if r14 == 0
    Set hex to jump amount from move with offset of -1
    the PC will push forward by two bytes at the end of the op. Offset hex by -1
  Synthesis:
    load32 A 0x1234_CDEF
    cond_move C A

REDUNDANT COMMANDS: -------------------------------------------------------------------------------------




