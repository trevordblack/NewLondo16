  readFromMemory
  writeToMemory
  2unsignedAdd
  2unsignedSub
  2multiply
  2divide
  move
  2OR
  2OR1NOT
  2AND
  2AND1NOT
  NOT
  2XNOR
  RSVD
  
readFromMemory
  m-110-cccc-aaaa-hhhh
writeToMemory
  m-111-cccc-aaaa-hhhh
2unsignedAdd
  m-000-cccc-aaaa-0010
2unsignedSub
  m-000-cccc-aaaa-0011
2multiply
  m-000-cccc-aaaa-010s
2divide
  m-000-cccc-aaaa-011s
move
  m-000-cccc-aaaa-100u
2OR
  m-000-cccc-aaaa-1010
2OR1NOT
  m-000-cccc-aaaa-1011
2AND
  m-000-cccc-aaaa-1100
2AND1NOT
  m-000-cccc-aaaa-1101
NOT
  m-000-cccc-aaaa-1110
2XNOR
  m-000-cccc-aaaa-1111
RSVD
  m-000-XXXX-XXXX-000X

For all command syntax:
  uppercase and lowercase are accepted everywhere, consistency in command
    LOAD R01 0xFF
    load r01 0xff

NATIVE COMMANDS: ---------------------------------------------------------------------------------------

load 8 bit
  Descriptor:
    Load an 8 bit value into a Register. Sets smallest byte (b7:b0) to hex, dne all other bits (b31:b8)
  Math Formula:
    C = h 
  Syntax:
    load c 0xFF
  Syntaxes Supported:
    load c 0xFF
    load c 255
    load c 11111111b
  Binary:
    m-001-cccc-hhhh-hhhh
    
Signed Addition with 3 operators
  Descriptor:
    Set a third register to the signed sum of two other registers
  Math Formula:
    C = A + B
  Syntax:
    add c a b
  Binary:
    m-010-cccc-aaaa-bbbb

Signed Subtraction with 3 operators
  Descriptor:
    Set a third register to the signed difference of two other registers
  Math Formula:
    C = A - B
  Syntax:
    sub c a b
  Binary:
    m-011-cccc-aaaa-bbbb
    
Arithmetic Shift Left
  Descriptor:
    Arithmetically shift a register value to the left. 
    Amount to shift is determined by a hex value and a second register value.
    When second register value is 0, shift the amount of hex value + 1, this enables 16 bit shift in a single command.
    when register value is not 0, shift the sum of register value and hex value 
  Math Formula:
    AMT = (A==0) ? (h+1) : (h+A)
    C = C << AMT
  Syntax:
    asl c a 0xF
  Binary:
    m-100-cccc-aaaa-hhhh

Arithmetic Shift Right
  Descriptor:
    Arithmetically shift a register value to the right. 
    Amount to shift is determined by a hex value and a second register value.
    When second register value is 0, shift the amount of hex value + 1, this enables 16 bit shift in a single command.
    when register value is not 0, shift the sum of register value and hex value   
  Math Formula:
    AMT = (A==0) ? (h+1) : (h+A)
    C = ( C[31:AMT] ) | ( C >> AMT )
  Syntax:
    asr c a 0xF  
  Binary:
    m-101-cccc-aaaa-hhhh
    
    
SYNTHESIZED COMMANDS: ----------------------------------------------------------------------------

load 32 bit
  Descriptor:
    Loads a 32 bit value into a Register. Sets bytes to hex in big-endian fashion
  Real Math Formula:
    C = 0x1234_CDEF
  Synthesized Math Formula:
    C = 0x12
    C = C << 2
    B = 
  Synthesis (0):
    load c 0x12
    csl 
    
Logical Shift Left
  Descriptor:
    Logically shift a register to the left, functionally identical to arithmetic shift left
  Real Math Formula:
    C = C[30:0], 0
  Synthesized Math Formula:
    C = C[30:0], 0
  Synthesis:
  
REDUNDANT COMMANDS: -------------------------------------------------------------------------------------




