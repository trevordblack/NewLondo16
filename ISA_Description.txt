Adaptive Doubly Reduced Instruction Set Computing (AD-RISC)

32 bit ISA with 16 registers and 16 length Instruction "words"

Registers set by convention:
  Register 00 will equal zero, this is not required by hardware, and can be changed as needed
  Register 13 is the stack pointer (sp)
  Register 12 is the "jump and link" register (jr), for returns from function calls
  
Registers set by hardware:
  Register 15 is the program counter (pc)

Registers set by both:
  Register 14 is the conditional operation register
    Whenever an operation is conditionally called:
    Register 14 is checked for a "equal to zero" condition
    For code with no conditional operations, R14 can be used as a general purpose Register

Command Syntax as determined for 16 bits:

Bits are big-endian (biggest at left)
  And configured b15:b0

All commands have a conditional operator, b15
  when b0 == 0
    command runs as intended
  when b0 == 1
    if R14 == 0
      command runs as intended
    else
      do nothing

There are Four syntaxes of operations:

Three Operand Operations
  when b14:b13 == 01
    if b12 == 0
      3add
    if b12 == 1
      3sub

Two Operand Operations
  if b14:b12 == 001
    loadHex
  if b14:b12 == 100
    arithmeticShiftLeft
  if b14:b12 == 101
    arithmeticShiftRight
  if b14:b12 == 110
    ReadfromMemory
  if b14:b12 == 111
    WritetoMemory

Miscellania
if b14:b12 == 000
  if b4:b1 == 001
    signedArithmetic
  if b4:b1 == 010
    2mult
  if b4:b1 == 011
    2divide
  if b4:b1 == 100
    move
  if b4:b1 == 101
    2OR
  if b4:b1 == 110
    2AND  
  if b4:b1 == 111
    2NOT

RESERVED
The reserved op call is also conditional based on b15, "equal-to-zero" of R14
if b14:b12 == 000 and b4:b1 == 000
  all available permutations are reserved
  At time of writing, intention is 16.x s.t. rsvd cue into next instruction's significance
  intended inclusions are
    floating point arithmetic
    double prec fp arithmetic
    arbitrary prec fp arithmetic
    32 bit load hex
    arbitrary bit load hex
    64 bit instructions
    repetitive ops (e.g. do next op x times moving sp n each time)
    vector operations
    change conditional from ez to lez, gez, nez, etc.
  additionally an op could be sent to "turn on" and "turn off" a specific functional unit
    Such as the decode unit to begin CISC style instructions, or vector, or fp, etc.
    Allowing for asm portability (but not binary portability) between CPUs of different complexity
    This also enables very reduced power consumption, as decode is single stage for D-RISC
This could be percieved as both a RISC and CISC style isa with a specific op for the switch
